[
  {
    "id": "F001",
    "kategori": "yedek",
    "soru": "Kapsülleme (Encapsulation), yazılım güvenliğine ve bakımına nasıl katkı sağlar?",
    "difficulty_level": 1,
    "etiketler": ["nesne-tabanlı-programlama"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Nesne içindeki veriyi dışarıdan erişime kapatarak veri bütünlüğünü korur ve modülerliği artırır.",
    "anahtar_kelimeler": ["veri-bütünlüğü", "modülerlik", "veri-gizleme"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F002",
    "kategori": "yedek",
    "soru": "İşletim Sistemleri'nin (OS) temel 2 görevi nedir?",
    "difficulty_level": 1,
    "etiketler": ["işletim-sistemleri"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_orneği": "Kaynak yönetimi (CPU, bellek) ve dosya/G/Ç (I/O) yönetimi.",
    "anahtar_kelimeler": ["kaynak-yönetimi", "bellek-yönetimi", "dosya-yönetimi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F003",
    "kategori": "yedek",
    "soru": "Bir tarayıcıda bir web sitesine erişirken HTTP durum kodlarından 404 ve 500 arasındaki fark nedir?",
    "difficulty_level": 1,
    "etiketler": ["ağ", "api-design"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "404: Kaynak bulunamadı (İstemci hatası). 500: Sunucu iç hatası (Sunucu hatası).",
    "anahtar_kelimeler": ["404", "500", "istemci-hatası", "sunucu-hatası"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F004",
    "kategori": "yedek",
    "soru": "Test Odaklı Geliştirme (TDD) nedir?",
    "difficulty_level": 1,
    "etiketler": ["test", "yazılım"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Önce testi, sonra kodu yazma yaklaşımıdır.",
    "anahtar_kelimeler": ["testi-önce-yazma", "test-döngüsü", "refactoring"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F005",
    "kategori": "yedek",
    "soru": "Bir Dizi (Array) ile bir Bağlı Liste (Linked List) arasındaki en temel fark nedir?",
    "difficulty_level": 1,
    "etiketler": ["veri-yapıları", "algoritma"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Array, bellekte ardışık depolanır (hızlı erişim). Linked List, düğümlerle bağlanır (dinamik boyut).",
    "anahtar_kelimeler": ["ardışık-bellek", "düğüm", "hızlı-erişim"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F006",
    "kategori": "yedek",
    "soru": "Veri tabanında Foreign Key (Yabancı Anahtar) kullanmanın amacı nedir?",
    "difficulty_level": 1,
    "etiketler": ["veritabani", "sql"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "İki tablo arasında ilişki kurar ve referans bütünlüğünü (referential integrity) sağlar.",
    "anahtar_kelimeler": ["ilişki-kurma", "referans-bütünlüğü", "bağlama"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F007",
    "kategori": "yedek",
    "soru": "Code Review (Kod İncelemesi) sürecinin takıma ve koda en büyük 2 faydası nedir?",
    "difficulty_level": 2,
    "etiketler": ["versiyon-kontrol", "takım-çalışması"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Hata yakalama oranını artırır, bilgi paylaşımını sağlar ve kod kalitesini standartlaştırır.",
    "anahtar_kelimeler": ["hata-yakalama", "bilgi-paylaşımı", "kalite-standardı"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F008",
    "kategori": "yedek",
    "soru": "Bir sistemde Loglama (Kaydetme) neden önemlidir? İyi bir log kaydında hangi bilgiler bulunmalıdır?",
    "difficulty_level": 2,
    "etiketler": ["devops", "yazılım"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Hataları izlemek, performansı analiz etmek için önemlidir. Zaman damgası, seviye (error, info) ve hata mesajı bulunmalıdır.",
    "anahtar_kelimeler": ["hata-izleme", "zaman-damgası", "seviye", "audit"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F009",
    "kategori": "yedek",
    "soru": "Bir projeye yeni başlayan bir yazılımcı için teknik borç (tech debt) kavramını nasıl açıklarsın?",
    "difficulty_level": 2,
    "etiketler": ["yazılım-mimarisi", "proje-yönetimi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Hızlıca ilerlemek için şimdi yapılan kötü veya aceleci tasarım kararlarının gelecekte ödenecek maliyetidir (ekstra zaman/çaba).",
    "anahtar_kelimeler": ["aceleci-karar", "gelecek-maliyeti", "refactoring", "kötü-tasarım"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F010",
    "kategori": "yedek",
    "soru": "Process ve Thread arasındaki bellek kullanımı açısından farkı açıkla.",
    "difficulty_level": 2,
    "etiketler": ["işletim-sistemleri", "paralel-programlama"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Process'ler kendi bellek alanlarına sahiptir; Thread'ler ise aynı process'in bellek alanını paylaşır.",
    "anahtar_kelimeler": ["bellek-paylaşımı", "kaynak-kullanımı", "bağlam-değiştirme"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F011",
    "kategori": "yedek",
    "soru": "Monolitik mimariden Mikroservislere geçişin bir projedeki en büyük yönetimsel zorluğu nedir?",
    "difficulty_level": 2,
    "etiketler": ["microservices", "yazılım-mimarisi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Dağıtık işlemlerin ve farklı teknolojilerin yönetim ve izleme (monitoring) karmaşıklığıdır.",
    "anahtar_kelimeler": ["izleme", "karmaşıklık", "dağıtık-işlem", "devops"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F012",
    "kategori": "yedek",
    "soru": "UI/UX bağlamında Kullanılabilirlik (Usability) testinin amacı nedir?",
    "difficulty_level": 2,
    "etiketler": ["ui-ux", "test"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Son kullanıcıların bir ürünü ne kadar kolay ve verimli kullanabildiğini ölçmektir.",
    "anahtar_kelimeler": ["kolaylık", "verimlilik", "kullanıcı-deneyimi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F013",
    "kategori": "yedek",
    "soru": "Concurrency (Eşzamanlılık) ve Parallelism (Paralellik) arasındaki teknik fark nedir?",
    "difficulty_level": 3,
    "etiketler": ["algoritma", "işletim-sistemleri"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Concurrency, görevlerin tek bir çekirdekte zaman dilimleriyle yönetilmesi; Parallelism, görevlerin birden fazla çekirdekte gerçekten aynı anda çalışmasıdır.",
    "anahtar_kelimeler": ["tek-çekirdek", "çoklu-çekirdek", "aynı-anda", "zaman-dilimi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F014",
    "kategori": "yedek",
    "soru": "CAP Teoremi ne demektir? Dağıtık sistemlerin tasarımında neden önemlidir?",
    "difficulty_level": 3,
    "etiketler": ["yazılım-mimarisi", "veritabani"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Consistency, Availability ve Partition Tolerance'tan yalnızca ikisinin aynı anda sağlanabileceğini söyler.",
    "anahtar_kelimeler": ["consistency", "availability", "partition-tolerance", "dağıtık-sistem"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F015",
    "kategori": "yedek",
    "soru": "Ağ Güvenliği'nde Sertifika Yetkilisi (CA)'nın rolü nedir?",
    "difficulty_level": 3,
    "etiketler": ["ağ", "kriptografi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Bir web sitesinin kimliğini doğrular ve güvenilir olduğunu onaylayarak TLS/SSL el sıkışmasını (handshake) mümkün kılar.",
    "anahtar_kelimeler": ["kimlik-doğrulama", "güvenilir", "ssl", "tls"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F016",
    "kategori": "yedek",
    "soru": "Bir API'de GET ve POST metotları arasındaki farkı açıklayabilir misin?",
    "difficulty_level": 1,
    "etiketler": ["api-design", "veri-iletimi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "GET: Veri çekmek için kullanılır (idempotent). POST: Yeni veri oluşturmak için kullanılır (tekrarlanabilir değildir).",
    "anahtar_kelimeler": ["veri-çekme", "veri-oluşturma", "idempotent", "tekrarlanabilir"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F017",
    "kategori": "yedek",
    "soru": "LIFO ve FIFO mantığı hangi veri yapılarına aittir?",
    "difficulty_level": 1,
    "etiketler": ["veri-yapıları", "algoritma"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "LIFO (Son Giren İlk Çıkar): Stack (Yığın). FIFO (İlk Giren İlk Çıkar): Queue (Kuyruk).",
    "anahtar_kelimeler": ["lifo", "fifo", "stack", "queue"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F018",
    "kategori": "yedek",
    "soru": "Bir yazılımda Hata Ayıklama (Debugging) sürecine nasıl başlarsın?",
    "difficulty_level": 1,
    "etiketler": ["problem-çözme", "yazılım"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_orneği": "Problemi yeniden oluşturmaya çalışır, hatanın nedenini izole eder ve Breakpoint'ler kullanarak adım adım ilerlerim.",
    "anahtar_kelimeler": ["yeniden-oluşturma", "izole-etme", "breakpoint", "hata-takibi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F019",
    "kategori": "yedek",
    "soru": "Sistem Programlama dillerinin (C, C++) en belirgin iki özelliği nedir?",
    "difficulty_level": 1,
    "etiketler": ["sistem-programlama"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_orneği": "Donanım erişiminin düşük seviyede olması ve manuel bellek yönetimi (Garbage Collection olmaması).",
    "anahtar_kelimeler": ["donanım-erişimi", "düşük-seviye", "manuel-bellek", "GC-yok"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F020",
    "kategori": "yedek",
    "soru": "HTML ve CSS'in bir web uygulamasındaki rolleri nelerdir?",
    "difficulty_level": 1,
    "etiketler": ["frontend", "ui-ux"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "HTML: Sayfanın yapısını/içeriğini oluşturur. CSS: Sayfanın stilini ve görünümünü belirler.",
    "anahtar_kelimeler": ["yapı", "içerik", "stil", "görünüm"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F021",
    "kategori": "yedek",
    "soru": "Scrum metodolojisinde 'Sprint' ne anlama gelir?",
    "difficulty_level": 2,
    "etiketler": ["agile-scrum", "proje-yönetimi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Belirli bir süre (genellikle 2-4 hafta) boyunca bitirilmesi taahhüt edilen görevler bütünüdür (iteratif çalışma dönemi).",
    "anahtar_kelimeler": ["süre", "taahhüt", "görev-bütünü", "iterasyon"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F022",
    "kategori": "yedek",
    "soru": "Tasarım Kalıplarından (Design Patterns) birini (Örn: Singleton) basitçe tanımla.",
    "difficulty_level": 2,
    "etiketler": ["tasarım-kalıpları", "nesne-tabanlı-programlama"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Singleton: Bir sınıfın sadece tek bir örneğinin olmasını ve bu örneğe global olarak erişilebilmesini garanti eder.",
    "anahtar_kelimeler": ["tek-örnek", "global-erişim", "sınıf"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F023",
    "kategori": "yedek",
    "soru": "Veri İletiminde kullanılan Asimetrik Şifreleme'nin temel amacı nedir?",
    "difficulty_level": 2,
    "etiketler": ["kriptografi", "veri-iletimi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "İki farklı anahtar (Genel ve Özel) kullanarak, anahtar değişimi problemine güvenli bir çözüm bulmaktır.",
    "anahtar_kelimeler": ["iki-anahtar", "genel-özel", "güvenli-değişim"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F024",
    "kategori": "yedek",
    "soru": "Load Balancer (Yük Dengeleyici)'ın sistem mimarisindeki görevi nedir?",
    "difficulty_level": 2,
    "etiketler": ["devops", "yazılım-mimarisi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Gelen ağ trafiğini birden fazla sunucuya dağıtarak sunucu aşırı yüklenmesini önlemek ve erişilebilirliği artırmaktır.",
    "anahtar_kelimeler": ["trafik-dağıtımı", "aşırı-yükleme", "erişilebilirlik", "sunucu"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F025",
    "kategori": "yedek",
    "soru": "Yapay Zeka Temelleri'nde 'Eğitim Verisi'nin (Training Data) önemi nedir?",
    "difficulty_level": 2,
    "etiketler": ["yapay-zeka-temelleri", "veri-analitiği"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Modelin desenleri öğrenmesini ve gelecekteki veriler hakkında tahmin yapmasını sağlamaktır.",
    "anahtar_kelimeler": ["desen-öğrenme", "tahmin-yapma", "model", "kalite"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F026",
    "kategori": "yedek",
    "soru": "IT Yönetişimi (IT Governance) neden gereklidir?",
    "difficulty_level": 2,
    "etiketler": ["it-yönetişimi", "bilgi-sistemi-stratejisi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "BT yatırımlarının iş hedefleriyle uyumlu olmasını ve risklerin yönetilmesini sağlamak için.",
    "anahtar_kelimeler": ["iş-hedefi", "risk-yönetimi", "uyum", "değer-yaratma"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F027",
    "kategori": "yedek",
    "soru": "Gömülü Sistemler'de kullanılan 'Real-Time' (Gerçek Zamanlı) kavramı neyi ifade eder?",
    "difficulty_level": 3,
    "etiketler": ["gömülü-sistemler", "işletim-sistemleri"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Bir işlemin, dış olaylara belirli bir süre (kesin zaman kısıtlaması) içinde yanıt verme zorunluluğudur (deterministic davranış).",
    "anahtar_kelimeler": ["zaman-kısıtlaması", "yanıt-zorunluluğu", "deterministic", "işletim-sistemi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F028",
    "kategori": "yedek",
    "soru": "Veritabanı Normalizasyonu (Normalization) neden yapılır?",
    "difficulty_level": 3,
    "etiketler": ["veritabani", "sistem-analizi-ve-tasarımı"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Veri tekrarını (redundancy) en aza indirmek ve veri tutarsızlığını önlemek için.",
    "anahtar_kelimeler": ["veri-tekrarı", "tutarsızlık", "anomali", "redundancy"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F029",
    "kategori": "yedek",
    "soru": "Dağıtık Sistemler'de veri bütünlüğünü sağlamanın zorluğu nedir?",
    "difficulty_level": 3,
    "etiketler": ["yazılım-mimarisi", "microservices"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Farklı servisler farklı veritabanları kullandığı için, tek bir işlemde tüm verinin aynı anda güncellenmesi garanti edilemez (CAP Teoremi).",
    "anahtar_kelimeler": ["cap-teoremi", "atomik-işlem", "dağıtık-veritabanı", "bütünlük"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "F030",
    "kategori": "yedek",
    "soru": "Hesaplama Teorisi'nde bir algoritmanın 'Çözülebilirlik' (Decidability) kavramı ne anlama gelir?",
    "difficulty_level": 3,
    "etiketler": ["hesaplama-teorisi", "algoritma"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Algoritmanın sonlu bir sürede doğru (Evet/Hayır) cevabı verip veremeyeceği garantisidir.",
    "anahtar_kelimeler": ["sonlu-süre", "doğru-cevap", "garanti", "decidable"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  }
]