[
  {
    "id": "Q081",
    "kategori": "teknik",
    "soru": "Nesne Tabanlı Programlama (OOP) prensiplerinden Miras Alma (Inheritance) ne demektir?",
    "difficulty_level": 1,
    "etiketler": ["nesne-tabanlı-programlama"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Bir sınıfın (alt sınıf) başka bir sınıfın (üst sınıf) özelliklerini ve davranışlarını devralmasıdır.",
    "anahtar_kelimeler": ["sınıf", "devralma", "alt-sınıf", "üst-sınıf"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F001"
  },
  {
    "id": "Q082",
    "kategori": "teknik",
    "soru": "Bir sıralama algoritması seçerken, bir listenin zaten sıralı olması durumunda hangi Big O karmaşıklığı en iyisidir?",
    "difficulty_level": 1,
    "etiketler": ["algoritma", "performans-optimizasyonu"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "O(n) karmaşıklığıdır. Listenin tamamını en az bir kez kontrol etme maliyeti vardır (Insertion Sort veya Bubble Sort'un optimize hali).",
    "anahtar_kelimeler": ["O(n)", "sıralı", "kontrol"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F005"
  },
  {
    "id": "Q083",
    "kategori": "teknik",
    "soru": "Bir web sayfasına erişirken kullanılan HTTP durum kodlarından 200, 404 ve 500 ne anlama gelir?",
    "difficulty_level": 1,
    "etiketler": ["ağ", "veri-iletimi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "200: Başarılı. 404: Kaynak Bulunamadı. 500: Sunucu İç Hatası.",
    "anahtar_kelimeler": ["200", "404", "500", "başarılı", "sunucu-hata"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F003"
  },
  {
    "id": "Q084",
    "kategori": "teknik",
    "soru": "Veritabanında JOIN komutunun temel amacı nedir?",
    "difficulty_level": 1,
    "etiketler": ["veritabani", "sql"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "İki veya daha fazla tablodaki verileri, ortak bir sütun (anahtar) kullanarak birleştirmektir.",
    "anahtar_kelimeler": ["birleştirme", "tablo", "ortak-sütun", "ilişki"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F006"
  },
  {
    "id": "Q085",
    "kategori": "teknik",
    "soru": "Git'te Commit ve Push komutları arasındaki temel farkı açıklayabilir misin?",
    "difficulty_level": 1,
    "etiketler": ["versiyon-kontrol"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Commit: Değişiklikleri yerel depoya kaydeder. Push: Yerel kayıtları uzak (remote) depoya gönderir.",
    "anahtar_kelimeler": ["yerel", "uzak", "kaydetme", "gönderme"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F007"
  },
  {
    "id": "Q086",
    "kategori": "teknik",
    "soru": "Bir mobil uygulamada UI (Kullanıcı Arayüzü) ve UX (Kullanıcı Deneyimi) kavramlarının temel ayrımını anlat.",
    "difficulty_level": 1,
    "etiketler": ["ui-ux", "design-thinking"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "UI: Ürünün nasıl göründüğüdür (estetik). UX: Ürünün nasıl hissettirdiğidir (kullanılabilirlik).",
    "anahtar_kelimeler": ["görünüm", "deneyim", "estetik", "kullanılabilirlik"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F012"
  },
  {
    "id": "Q087",
    "kategori": "teknik",
    "soru": "Unit Test (Birim Testi)'nin temel odak noktası nedir?",
    "difficulty_level": 1,
    "etiketler": ["test"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Kodun en küçük izole edilmiş parçalarının (fonksiyonlar, metotlar) doğru çalışıp çalışmadığını doğrulamaktır.",
    "anahtar_kelimeler": ["izole", "en-küçük-parça", "doğrulama"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F004"
  },
  {
    "id": "Q088",
    "kategori": "teknik",
    "soru": "Clean Code (Temiz Kod) yazmanın uzun vadede takım çalışmasına katkısı nedir?",
    "difficulty_level": 1,
    "etiketler": ["clean-code", "takım-çalışması"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Kodun okunabilirliğini ve anlaşılabilirliğini artırır, böylece yeni ekip üyeleri daha hızlı adapte olur.",
    "anahtar_kelimeler": ["okunabilirlik", "anlaşılabilirlik", "adaptasyon", "bakım"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F007"
  },
  {
    "id": "Q089",
    "kategori": "teknik",
    "soru": "Agile/Scrum çerçevesinde Daily Scrum (Günlük Toplantı)'nın amacı nedir ve ne kadar sürmelidir?",
    "difficulty_level": 1,
    "etiketler": ["agile-scrum", "proje-yönetimi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Amacı: Takımın ilerlemesini senkronize etmek ve engelleri belirlemektir. Süre: 15 dakikayı geçmemelidir (standup).",
    "anahtar_kelimeler": ["senkronizasyon", "engel", "15-dakika", "ilerleme"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q090",
    "kategori": "teknik",
    "soru": "Veri Analitiği'nin temel hedefi nedir?",
    "difficulty_level": 1,
    "etiketler": ["veri-analitiği", "iş-zekası"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Ham veriyi anlamlı içgörülere dönüştürerek iş kararlarını desteklemektir.",
    "anahtar_kelimeler": ["içgörü", "karar-destek", "ham-veri"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q091",
    "kategori": "teknik",
    "soru": "Sistem Analizi aşamasında neden iş ve teknik ekiplerin iş birliği yapması gerekir?",
    "difficulty_level": 1,
    "etiketler": ["sistem-analizi-ve-tasarımı", "iş-analizi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_orneği": "İş ekipleri neye ihtiyaç duyulduğunu bilir; teknik ekipler bunun nasıl uygulanacağını bilir. İletişim, yanlış anlaşılmaları önler.",
    "anahtar_kelimeler": ["gereksinim", "uygulama", "iletişim", "yanlış-anlaşılma"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q092",
    "kategori": "teknik",
    "soru": "Gömülü Sistemlerin çalıştığı ortamlar genellikle neden kısıtlı kaynaklara sahiptir?",
    "difficulty_level": 1,
    "etiketler": ["gömülü-sistemler", "donanım-yazılım-entegrasyonu"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_orneği": "Maliyet, boyut, güç tüketimi (pil ömrü) gibi fiziksel kısıtlamalar nedeniyle.",
    "anahtar_kelimeler": ["maliyet", "güç-tüketimi", "fiziksel-kısıtlama"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F002"
  },
  {
    "id": "Q093",
    "kategori": "teknik",
    "soru": "İşletim Sistemleri'nin ana görevi olan Kaynak Yönetimi ne anlama gelir?",
    "difficulty_level": 1,
    "etiketler": ["işletim-sistemleri"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "CPU, bellek (RAM), depolama ve G/Ç (I/O) cihazları gibi sistem kaynaklarının süreçler arasında adil ve verimli dağıtılmasıdır.",
    "anahtar_kelimeler": ["CPU", "bellek", "adil-dağıtım", "kaynak-tahsis"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F002"
  },
  {
    "id": "Q094",
    "kategori": "teknik",
    "soru": "Bir web uygulamasında API kullanmanın temel amacı nedir?",
    "difficulty_level": 1,
    "etiketler": ["api-design"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Farklı yazılım bileşenlerinin veya sistemlerinin birbiriyle güvenli ve standart bir şekilde iletişim kurmasını sağlamaktır.",
    "anahtar_kelimeler": ["iletişim", "standart", "veri-transferi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F003"
  },
  {
    "id": "Q095",
    "kategori": "teknik",
    "soru": "DevOps yaklaşımının temel faydası nedir?",
    "difficulty_level": 1,
    "etiketler": ["devops", "ci-cd"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Geliştirme (Dev) ve Operasyon (Ops) ekiplerini birleştirerek yazılım teslimat hızını ve güvenilirliğini artırmaktır.",
    "anahtar_kelimeler": ["teslimat-hızı", "güvenilirlik", "otomasyon", "iş-birliği"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F008"
  },
  {
    "id": "Q096",
    "kategori": "teknik",
    "soru": "Bir dizideki elemana en hızlı şekilde erişmek için hangi veri yapısı kullanılır?",
    "difficulty_level": 1,
    "etiketler": ["veri-yapıları", "algoritma"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Hash Map (veya Dictionary/Hash Table) kullanılır, çünkü ortalama erişim süresi O(1)'dir.",
    "anahtar_kelimeler": ["hash-map", "O(1)", "dictionary", "hızlı-erişim"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F005"
  },
  {
    "id": "Q097",
    "kategori": "teknik",
    "soru": "Microservices mimarisini tek cümleyle nasıl tanımlarsın?",
    "difficulty_level": 1,
    "etiketler": ["microservices", "yazılım-mimarisi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Büyük bir uygulamayı, birbirinden bağımsız olarak dağıtılabilen, küçük ve gevşek bağlı hizmetler bütününe ayırma yöntemidir.",
    "anahtar_kelimeler": ["küçük-hizmetler", "bağımsız", "dağıtılabilir", "gevşek-bağlı"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F011"
  },
  {
    "id": "Q098",
    "kategori": "teknik",
    "soru": "C/C++ gibi Sistem Programlama dillerinde manuel bellek yönetimi neden yapılır?",
    "difficulty_level": 1,
    "etiketler": ["sistem-programlama", "performans-optimizasyonu"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Belleğin ne zaman serbest bırakılacağı üzerinde tam kontrol sahibi olmak ve böylece daha öngörülebilir performans ve daha az kaynak kullanımı sağlamaktır.",
    "anahtar_kelimeler": ["tam-kontrol", "performans", "kaynak-kullanımı"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F010"
  },
  {
    "id": "Q099",
    "kategori": "teknik",
    "soru": "Kriptografi'de kullanılan Hash Fonksiyonu'nun temel özelliği nedir?",
    "difficulty_level": 1,
    "etiketler": ["kriptografi", "veri-iletimi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Girişin ne kadar büyük olursa olsun, sabit boyutlu benzersiz bir çıktı (hash değeri) üretmesidir. Veri bütünlüğünü kontrol etmek için kullanılır.",
    "anahtar_kelimeler": ["sabit-boyut", "benzersiz", "veri-bütünlüğü"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F015"
  },
  {
    "id": "Q100",
    "kategori": "teknik",
    "soru": "Tasarım Kalıpları (Design Patterns) neden icat edilmiştir?",
    "difficulty_level": 1,
    "etiketler": ["tasarım-kalıpları", "yazılım-mimarisi"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Yazılım geliştirmede tekrar eden ve kanıtlanmış sorunlara ortak, yeniden kullanılabilir çözümler sunmak için.",
    "anahtar_kelimeler": ["tekrar-eden-sorun", "ortak-çözüm", "yeniden-kullanılabilir"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F009"
  },
  {
    "id": "Q101",
    "kategori": "teknik",
    "soru": "ERP ve CRM arasındaki en temel farkı birer cümlede özetle.",
    "difficulty_level": 1,
    "etiketler": ["erp", "crm"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_orneği": "ERP: İç süreçleri ve kaynakları (finans, üretim) yönetir. CRM: Müşteri ilişkilerini ve dışa dönük süreçleri yönetir.",
    "anahtar_kelimeler": ["iç-süreç", "dış-süreç", "kaynak-yönetimi", "müşteri-ilişkisi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q102",
    "kategori": "teknik",
    "soru": "Proje Yönetimi'nde bir görevdeki Kritik Yol (Critical Path) neyi ifade eder?",
    "difficulty_level": 1,
    "etiketler": ["proje-yönetimi", "proje-planlama"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_ornegi": "Projenin tamamlanma süresini doğrudan belirleyen, gecikmeye tahammülü olmayan görevler dizisidir.",
    "anahtar_kelimeler": ["tamamlanma-süresi", "gecikmeye-tahammül", "görev-dizisi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q103",
    "kategori": "teknik",
    "soru": "Clean Code prensiplerine göre yazdığın bir kod bloğuna ne zaman yorum (comment) eklemelisin?",
    "difficulty_level": 1,
    "etiketler": ["clean-code", "yazılım"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_orneği": "Kodun neden yapıldığını (iş mantığını veya amacı) açıklamak gerektiğinde, kodun kendisi yeterince açık değilse eklenmelidir.",
    "anahtar_kelimeler": ["neden", "iş-mantığı", "açıklama", "amaç"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F009"
  },
  {
    "id": "Q104",
    "kategori": "teknik",
    "soru": "REST API'larda kullanılan Resource (Kaynak) kavramı neyi ifade eder?",
    "difficulty_level": 1,
    "etiketler": ["api-design"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_orneği": "Bir sistemde URL aracılığıyla erişilebilen ve üzerinde işlem yapılabilen herhangi bir varlık veya veri parçasıdır (Örn: /users, /products).",
    "anahtar_kelimeler": ["varlık", "veri-parçası", "URL", "erişilebilir"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F003"
  },
  {
    "id": "Q105",
    "kategori": "teknik",
    "soru": "Veri Ambarı (Data Warehouse)'nın temel amacı nedir?",
    "difficulty_level": 1,
    "etiketler": ["iş-zekası", "veri-analitiği"],
    "prereq_tags": [],
    "follow_up_to": null,
    "cevap_orneği": "Büyük miktarda tarihsel veriyi, iş analizi ve raporlama amacıyla konsolide (birleştirilmiş) ve organize edilmiş bir şekilde saklamaktır.",
    "anahtar_kelimeler": ["tarihsel-veri", "raporlama", "analiz", "konsolide"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q106",
    "kategori": "teknik",
    "soru": "Interface (Arayüz) kullanmak, kodun genişletilebilirliğini ve bakımını nasıl artırır?",
    "difficulty_level": 2,
    "etiketler": ["nesne-tabanlı-programlama", "clean-code"],
    "prereq_tags": ["nesne-tabanlı-programlama"],
    "follow_up_to": null,
    "cevap_orneği": "Sınıfları somut uygulamalardan ayırır. Yeni bir sınıf eklendiğinde (genişletme), mevcut arayüz bozulmaz (bakım).",
    "anahtar_kelimeler": ["soyutlama", "genişletilebilirlik", "somut-uygulama"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F001"
  },
  {
    "id": "Q107",
    "kategori": "teknik",
    "soru": "Bir sistemin Performans Optimizasyonu sırasında ilk nereden (kod, DB, ağ) başlarsın? Neden?",
    "difficulty_level": 2,
    "etiketler": ["performans-optimizasyonu", "problem-çözme"],
    "prereq_tags": ["performans-optimizasyonu"],
    "follow_up_to": null,
    "cevap_ornegi": "Öncelikle en büyük darboğazın nerede olduğunu ölçüm araçlarıyla (profiler) tespit ederim. Genellikle veritabanı sorgularından veya I/O işlemlerinden başlanır.",
    "anahtar_kelimeler": ["profiler", "darboğaz", "veritabanı", "ölçüm"],
    "puanlama_kriteri": "star-metodu",
    "fallback_id": "F008"
  },
  {
    "id": "Q108",
    "kategori": "teknik",
    "soru": "TCP ve UDP arasındaki farkı bir canlı yayın (streaming) senaryosu üzerinden açıklayabilir misin?",
    "difficulty_level": 2,
    "etiketler": ["ağ", "veri-iletimi"],
    "prereq_tags": ["ağ"],
    "follow_up_to": null,
    "cevap_orneği": "UDP, veri kaybına izin vererek hızı öncelikler (daha az gecikme). TCP ise veri kaybını önlemek için daha yavaş çalışır (güvenilirlik). Canlı yayında UDP tercih edilir.",
    "anahtar_kelimeler": ["veri-kaybı", "güvenilirlik", "hız", "gecikme", "canlı-yayın"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F003"
  },
  {
    "id": "Q109",
    "kategori": "teknik",
    "soru": "Veritabanı Normalizasyonu (örn: 3NF) temel olarak hangi sorunları çözmeyi hedefler?",
    "difficulty_level": 2,
    "etiketler": ["veritabani", "sistem-analizi-ve-tasarımı"],
    "prereq_tags": ["veritabani"],
    "follow_up_to": null,
    "cevap_orneği": "Veri tekrarını (redundancy) azaltmayı, veri ekleme/silme/güncelleme anomalilerini (anomalies) ve veri bütünlüğü sorunlarını çözmeyi hedefler.",
    "anahtar_kelimeler": ["veri-tekrarı", "anomali", "bütünlük", "redundancy"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F006"
  },
  {
    "id": "Q110",
    "kategori": "teknik",
    "soru": "Agile/Scrum metodolojisi, gereksinimlerin sıklıkla değiştiği projelerde neden geleneksel (Waterfall) yöntemden daha iyidir?",
    "difficulty_level": 2,
    "etiketler": ["agile-scrum", "proje-yönetimi"],
    "prereq_tags": ["agile-scrum"],
    "follow_up_to": null,
    "cevap_orneği": "Kısa iterasyonlar (sprintler) ve sürekli geri bildirim döngüleri sayesinde değişime kolayca adapte olur ve riski erken yönetir.",
    "anahtar_kelimeler": ["iterasyon", "geri-bildirim", "değişime-açık", "risk-yönetimi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q111",
    "kategori": "teknik",
    "soru": "Unit Test yazarken, dışarıdan gelen bir API'yi neden Mock etmelisin?",
    "difficulty_level": 2,
    "etiketler": ["test", "tasarım-kalıpları"],
    "prereq_tags": ["test"],
    "follow_up_to": null,
    "cevap_orneği": "API'nin yavaş çalışması, maliyeti veya güvenilmezliği testin sonucunu etkilemesin diye. Testin izole ve hızlı kalmasını sağlar.",
    "anahtar_kelimeler": ["izole", "mock", "hızlı", "dış-bağımlılık"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F004"
  },
  {
    "id": "Q112",
    "kategori": "teknik",
    "soru": "Microservices mimarisine geçiş, geliştirici verimliliğini nasıl artırır?",
    "difficulty_level": 2,
    "etiketler": ["microservices", "yazılım-mimarisi"],
    "prereq_tags": ["microservices"],
    "follow_up_to": null,
    "cevap_orneği": "Küçük, bağımsız kod tabanlarında çalışıldığı için farklı ekipler birbirini engellemeden eş zamanlı geliştirmeyi kolaylaştırır.",
    "anahtar_kelimeler": ["bağımsız-geliştirme", "küçük-kod", "eş-zamanlılık"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F011"
  },
  {
    "id": "Q113",
    "kategori": "teknik",
    "soru": "React, Vue ve Angular'dan hangisi öğrenme eğrisi açısından en diktir? Neden?",
    "difficulty_level": 2,
    "etiketler": ["react-vue-angular", "frontend"],
    "prereq_tags": ["react-vue-angular"],
    "follow_up_to": null,
    "cevap_orneği": "Angular. Çünkü daha çok 'framework'tür ve TypeScript, RxJS gibi kendine has çok sayıda kavram ve katı yapı (scaffolding) öğrenmeyi zorunlu kılar.",
    "anahtar_kelimeler": ["angular", "framework", "katı-yapı", "typescript"],
    "puanlama_kriteri": "mantik-tutarliligi",
    "fallback_id": null
  },
  {
    "id": "Q114",
    "kategori": "teknik",
    "soru": "Design Thinking metodolojisi, bir yazılım projesinin hangi aşamalarında en çok değer yaratır?",
    "difficulty_level": 2,
    "etiketler": ["design-thinking", "ui-ux"],
    "prereq_tags": ["design-thinking"],
    "follow_up_to": null,
    "cevap_orneği": "Empati ve Prototipleme aşamalarında en çok değer yaratır. Problemin doğru tanımlanmasını ve kullanıcı tarafından hızlı test edilmesini sağlar.",
    "anahtar_kelimeler": ["empati", "prototipleme", "problem-tanımı", "erken-test"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F012"
  },
  {
    "id": "Q115",
    "kategori": "teknik",
    "soru": "Process (Süreç) ve Thread (İş Parçacığı) arasındaki bellek paylaşımı farkı, çok çekirdekli sistemlerde nasıl bir avantaja dönüşür?",
    "difficulty_level": 2,
    "etiketler": ["işletim-sistemleri", "paralel-programlama"],
    "prereq_tags": ["işletim-sistemleri"],
    "follow_up_to": null,
    "cevap_orneği": "Thread'ler aynı bellek alanını paylaştığı için Process'lere göre daha az kaynak tüketir ve bağlam değiştirme (context switching) süresi daha hızlıdır.",
    "anahtar_kelimeler": ["hızlı-geçiş", "kaynak-tüketimi", "bellek-paylaşımı"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F010"
  },
  {
    "id": "Q116",
    "kategori": "teknik",
    "soru": "CRM sistemi entegrasyonunda karşılaşılan en büyük 2 iş analizi zorluğu nedir?",
    "difficulty_level": 2,
    "etiketler": ["crm", "iş-analizi"],
    "prereq_tags": ["crm"],
    "follow_up_to": null,
    "cevap_orneği": "Mevcut verilerin karmaşıklığı/kalitesizliği ve farklı departmanların (Satış, Pazarlama) sistemden farklı beklentilere sahip olması.",
    "anahtar_kelimeler": ["veri-kalitesi", "farklı-beklentiler", "veri-göçü", "departman"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
 {
    "id": "Q117",
    "kategori": "teknik",
    "soru": "SQL'de INNER JOIN ile LEFT JOIN arasındaki farkı açıklayan bir senaryo ver.",
    "difficulty_level": 2,
    "etiketler": ["veritabani", "sql"],
    "prereq_tags": ["sql"],
    "follow_up_to": null,
    "cevap_ornegi": "INNER JOIN: Sadece her iki tabloda eşleşen kayıtları getirir. LEFT JOIN: Soldaki tablonun tüm kayıtlarını ve eşleşen sağ kayıtları getirir (eşleşmeyenler NULL olur).",
    "anahtar_kelimeler": ["eşleşme", "tüm-kayıtlar", "null", "bölüm-sol"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F006"
  },
  {
    "id": "Q118",
    "kategori": "teknik",
    "soru": "Siber Risk ve Uyumluluk alanında, 'Risk İştahı' (Risk Appetite) kavramı neyi ifade eder?",
    "difficulty_level": 2,
    "etiketler": ["siber-risk-ve-uyumluluk", "it-yönetişimi"],
    "prereq_tags": ["siber-risk-ve-uyumluluk"],
    "follow_up_to": null,
    "cevap_orneği": "Bir kuruluşun hedeflerine ulaşmak için almaya istekli olduğu risk seviyesidir. Yönetim kurulu tarafından belirlenir.",
    "anahtar_kelimeler": ["istekli-olma", "seviye", "yönetim-kurulu"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q119",
    "kategori": "teknik",
    "soru": "Git'te `git reset` ve `git checkout` komutlarının temel farkı nedir?",
    "difficulty_level": 2,
    "etiketler": ["versiyon-kontrol", "devops"],
    "prereq_tags": ["versiyon-kontrol"],
    "follow_up_to": null,
    "cevap_orneği": "Reset: Commit geçmişini değiştirir (tehlikeli olabilir). Checkout: Branch'ler veya Commit'ler arasında geçiş yapar (geçmişi değiştirmez).",
    "anahtar_kelimeler": ["geçmiş-değiştirme", "geçiş", "commit", "branch"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F007"
  },
  {
    "id": "Q120",
    "kategori": "teknik",
    "soru": "Veri yapılarında, bir ağaç yapısında eleman ararken neden Balanced Tree (Dengeli Ağaç) kullanmak önemlidir?",
    "difficulty_level": 2,
    "etiketler": ["veri-yapıları", "algoritma", "performans-optimizasyonu"],
    "prereq_tags": ["veri-yapıları"],
    "follow_up_to": null,
    "cevap_orneği": "Ağacın derinliğini minimumda tutar. Bu sayede en kötü durumda bile arama karmaşıklığı O(log n) kalır ve lineerleşmez.",
    "anahtar_kelimeler": ["derinlik", "O(log n)", "lineerleşme", "dengeli"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F005"
  },
  {
    "id": "Q121",
    "kategori": "teknik",
    "soru": "Bir Monolitik uygulamanın neden zamanla performans optimizasyonu açısından zorlaştığını açıkla.",
    "difficulty_level": 2,
    "etiketler": ["yazılım-mimarisi", "performans-optimizasyonu"],
    "prereq_tags": ["yazılım-mimarisi"],
    "follow_up_to": null,
    "cevap_orneği": "Uygulamanın tamamı tek bir sunucuda ölçeklenir ve farklı modüller farklı kaynaklara ihtiyaç duysa bile, en zayıf modül tüm sistemi kısıtlar (Resource Contention).",
    "anahtar_kelimeler": ["tek-sunucu", "resource-contention", "ölçekleme-kısıtlaması"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F009"
  },
  {
    "id": "Q122",
    "kategori": "teknik",
    "soru": "Fonksiyonel Programlama ve Nesne Tabanlı Programlama arasındaki temel felsefi fark nedir?",
    "difficulty_level": 2,
    "etiketler": ["nesne-tabanlı-programlama", "clean-code"],
    "prereq_tags": ["nesne-tabanlı-programlama"],
    "follow_up_to": null,
    "cevap_orneği": "OOP: Veri ve davranış birleştirilir (nesneler). Fonksiyonel: Veri ve davranış ayrılır; durum (state) değiştirilmez (immutability).",
    "anahtar_kelimeler": ["state", "immutability", "ayrım", "nesne-davranış"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F001"
  },
  {
    "id": "Q123",
    "kategori": "teknik",
    "soru": "CI/CD Pipeline'ında otomatikleştirilmiş testlerin (Unit, Integration) temel amacı nedir?",
    "difficulty_level": 2,
    "etiketler": ["ci-cd", "test", "devops"],
    "prereq_tags": ["ci-cd"],
    "follow_up_to": null,
    "cevap_orneği": "Hataları üretim ortamına ulaşmadan erken aşamada yakalamak ve yeni kod entegrasyonunda güven sağlamaktır (Regression Prevention).",
    "anahtar_kelimeler": ["erken-yakalama", "güven", "otomasyon", "entegrasyon"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F004"
  },
  {
    "id": "Q124",
    "kategori": "teknik",
    "soru": "Teknoloji Yönetimi açısından, 'Teknoloji Yaşam Döngüsü'nün (Technology Life Cycle) aşamaları nelerdir?",
    "difficulty_level": 2,
    "etiketler": ["teknoloji-yönetimi", "bilgi-sistemi-stratejisi"],
    "prereq_tags": ["teknoloji-yönetimi"],
    "follow_up_to": null,
    "cevap_orneği": "Doğuş, Büyüme, Olgunluk, Gerileme (Redundancy) aşamalarından oluşur. Stratejik kararlara yön verir.",
    "anahtar_kelimeler": ["doğuş", "olgunluk", "gerileme", "strateji"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q125",
    "kategori": "teknik",
    "soru": "İş Analizi yaparken, paydaşlardan gereksinim toplama yöntemlerinden (mülakat, anket, gözlem) hangisini ne zaman tercih edersin?",
    "difficulty_level": 2,
    "etiketler": ["iş-analizi", "sistem-analizi-ve-tasarımı"],
    "prereq_tags": ["iş-analizi"],
    "follow_up_to": null,
    "cevap_orneği": "Mülakat: Derinlemesine bilgi için. Gözlem: Mevcut süreçteki darboğazları görmek için. Anket: Geniş kitleye ulaşmak için.",
    "anahtar_kelimeler": ["mülakat", "gözlem", "anket", "derinlemesine"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
 {
    "id": "Q126",
    "kategori": "teknik",
    "soru": "Dağıtık sistemlerde veri bütünlüğünü (Consistency) sağlamak için Two-Phase Commit (2PC) yerine Saga desenini ne zaman tercih edersin? Neden?",
    "difficulty_level": 3,
    "etiketler": ["microservices", "yazılım-mimarisi", "veritabani"],
    "prereq_tags": ["microservices", "veritabani"],
    "follow_up_to": null,
    "cevap_orneği": "Saga, 2PC'nin Monolitik doğası nedeniyle Mikroservislerde kullanılmadığı durumlarda tercih edilir. Başarısızlık durumunda telafi edici (compensating) işlemler kullanır.",
    "anahtar_kelimeler": ["saga", "2pc", "telafi-işlemleri", "dağıtık-işlem"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F014"
  },
  {
    "id": "Q127",
    "kategori": "teknik",
    "soru": "Donanım-Yazılım Entegrasyonu'nda, Kernel Space'te çalışan bir sürücünün (driver) hatalı olması neden tüm sistemi çökertme potansiyeline sahiptir?",
    "difficulty_level": 3,
    "etiketler": ["işletim-sistemleri", "sistem-programlama", "donanım-yazılım-entegrasyonu"],
    "prereq_tags": ["işletim-sistemleri", "sistem-programlama"],
    "follow_up_to": null,
    "cevap_orneği": "Kernel Space, tüm sistem belleğine ve CPU'ya ayrıcalıklı erişime sahiptir. Hatalı bir sürücü, bu alanı bozarak çekirdeğin istikrarsızlaşmasına (kernel panic) neden olur.",
    "anahtar_kelimeler": ["kernel-space", "ayrıcalıklı-erişim", "sistem-belleği", "çekirdek-çökmesi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F002"
  },
  {
    "id": "Q128",
    "kategori": "teknik",
    "soru": "Kriptografide, güvenli bir anahtar değişimini sağlamak için Diffie-Hellman gibi Asimetrik şifreleme nasıl bir rol oynar?",
    "difficulty_level": 3,
    "etiketler": ["kriptografi", "ağ", "veri-iletimi"],
    "prereq_tags": ["kriptografi"],
    "follow_up_to": null,
    "cevap_orneği": "Asimetrik şifreleme, iki tarafın ortak bir gizli anahtar üzerinde güvenli olmayan bir kanal üzerinden anlaşmasını sağlar. Gerçek veri aktarımı ise hızlı olan simetrik anahtarla yapılır.",
    "anahtar_kelimeler": ["asimetrik", "simetrik", "anahtar-değişimi", "güvenli-kanal"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F015"
  },
  {
    "id": "Q129",
    "kategori": "teknik",
    "soru": "Yapay Zeka Temellerinde, Aşırı Uyum (Overfitting) problemi nedir ve bu sorunu önlemek için 2 yöntem açıkla.",
    "difficulty_level": 3,
    "etiketler": ["yapay-zeka-temelleri", "veri-analitiği"],
    "prereq_tags": ["yapay-zeka-temelleri"],
    "follow_up_to": null,
    "cevap_orneği": "Overfitting: Modelin eğitim verisini ezberleyip yeni veride kötü performans göstermesidir. Önlemler: Düzenlileştirme (Regularization) ve daha fazla veri kullanmaktır.",
    "anahtar_kelimeler": ["eğitim-verisi", "ezberleme", "düzenlileştirme", "yeni-veri"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F000"
  },
  {
    "id": "Q130",
    "kategori": "teknik",
    "soru": "Paralel Programlamada, Yarış Koşulu (Race Condition) nedir? Bu durum Mutex ve Semaphore ile nasıl önlenir?",
    "difficulty_level": 3,
    "etiketler": ["paralel-programlama", "işletim-sistemleri", "veri-yapıları"],
    "prereq_tags": ["paralel-programlama"],
    "follow_up_to": null,
    "cevap_orneği": "Race Condition: Birden fazla iş parçacığının aynı anda ortak kaynağa erişmeye çalışması ve sonucun tahmin edilemez olmasıdır. Mutex/Semaphore ile kritik bölgeye tek bir iş parçacığının girmesine izin verilir.",
    "anahtar_kelimeler": ["yarış-koşulu", "ortak-kaynak", "mutex", "kritik-bölge"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F013"
  },
  {
    "id": "Q131",
    "kategori": "teknik",
    "soru": "Bir API Design yaparken, URI'larınızı çoğul (users) kullanmanın nedeni nedir?",
    "difficulty_level": 2,
    "etiketler": ["api-design", "clean-code"],
    "prereq_tags": ["api-design"],
    "follow_up_to": null,
    "cevap_orneği": "Çoğul isimler, kaynağın bir koleksiyon olduğunu ve RESTful standartlarına uyduğunu gösterir.",
    "anahtar_kelimeler": ["koleksiyon", "çoğul", "restful-standart"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F003"
  },
  {
    "id": "Q132",
    "kategori": "teknik",
    "soru": "JavaScript uygulamasında Closure (Kapanış) kavramının temel avantajı nedir?",
    "difficulty_level": 2,
    "etiketler": ["nodejs-python-java", "frontend"],
    "prereq_tags": ["nodejs-python-java"],
    "follow_up_to": null,
    "cevap_orneği": "Bir fonksiyonun, tanımlandığı kapsamdaki değişkenlere her zaman erişebilmesini sağlar (veri gizleme/encapsulation).",
    "anahtar_kelimeler": ["veri-gizleme", "kapsam", "tanımlama"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F001"
  },
  {
    "id": "Q133",
    "kategori": "teknik",
    "soru": "DevOps bağlamında Containerization (Kapsayıcılaştırma) (örneğin Docker) kullanmanın temel faydası nedir?",
    "difficulty_level": 2,
    "etiketler": ["devops", "işletim-sistemleri"],
    "prereq_tags": ["devops"],
    "follow_up_to": null,
    "cevap_orneği": "Uygulamanın tüm bağımlılıklarıyla birlikte izole ve tutarlı bir ortamda çalışmasını garanti eder (Çevre tutarsızlığını giderir).",
    "anahtar_kelimeler": ["izolasyon", "tutarlılık", "bağımlılık", "docker"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F011"
  },
  {
    "id": "Q134",
    "kategori": "teknik",
    "soru": "HTML'de erişilebilirliği (Accessibility) artırmak için hangi ARIA özelliklerini kullanırsın?",
    "difficulty_level": 2,
    "etiketler": ["ui-ux", "frontend"],
    "prereq_tags": ["ui-ux"],
    "follow_up_to": null,
    "cevap_orneği": "`aria-label` ve `aria-describedby` gibi etiketleri ekran okuyucular için semantik bilgi sağlamak amacıyla kullanırım.",
    "anahtar_kelimeler": ["aria-label", "ekran-okuyucu", "semantik"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F012"
  },
  {
    "id": "Q135",
    "kategori": "teknik",
    "soru": "ERP ve CRM sistemlerinin birbirleriyle veri paylaşımı yapması neden kritiktir?",
    "difficulty_level": 2,
    "etiketler": ["erp", "crm", "veri-analitiği"],
    "prereq_tags": ["erp", "crm"],
    "follow_up_to": null,
    "cevap_orneği": "Müşteri verileri (CRM) ile finans/üretim verilerini (ERP) birleştirerek 360 derece iş görünürlüğü ve doğru tahmin sağlar.",
    "anahtar_kelimeler": ["360-derece", "veri-paylaşımı", "tahmin", "entegrasyon"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q136",
    "kategori": "teknik",
    "soru": "Microservices mimarisinde hizmetleri dağıtırken Service Discovery (Hizmet Keşfi) mekanizmasına neden ihtiyaç duyulur?",
    "difficulty_level": 2,
    "etiketler": ["microservices", "yazılım-mimarisi"],
    "prereq_tags": ["microservices"],
    "follow_up_to": null,
    "cevap_orneği": "Her servisin IP adresi ve portu sürekli değiştiği için, diğer servislerin birbirini dinamik olarak bulmasını sağlar.",
    "anahtar_kelimeler": ["dinamik", "ip-adresi", "keşif", "kayıt"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F011"
  },
  {
    "id": "Q137",
    "kategori": "teknik",
    "soru": "Kriptografi'de neden Salt değeri kullanılır?",
    "difficulty_level": 2,
    "etiketler": ["kriptografi", "veri-iletimi"],
    "prereq_tags": ["kriptografi"],
    "follow_up_to": null,
    "cevap_orneği": "Aynı şifreye sahip farklı kullanıcıların aynı hash değerini üretmesini engelleyerek Rainbow Table saldırılarını önler.",
    "anahtar_kelimeler": ["salt", "hash-değeri", "rainbow-table", "saldırı"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F015"
  },
  {
    "id": "Q138",
    "kategori": "teknik",
    "soru": "Proje Yönetimi'nde Paydaş (Stakeholder) yönetiminin temel amacı nedir?",
    "difficulty_level": 2,
    "etiketler": ["proje-yönetimi", "iletişim"],
    "prereq_tags": ["proje-yönetimi"],
    "follow_up_to": null,
    "cevap_orneği": "Paydaş beklentilerini anlamak, çatışmaları yönetmek ve projenin başarısı için desteklerini sağlamaktır.",
    "anahtar_kelimeler": ["beklenti-yönetimi", "destek", "çatışma"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q139",
    "kategori": "teknik",
    "soru": "Test hiyerarşisinde E2E (Uçtan Uca) Testi'nin rolü nedir ve neden çok pahalıdır?",
    "difficulty_level": 2,
    "etiketler": ["test", "ci-cd"],
    "prereq_tags": ["test"],
    "follow_up_to": null,
    "cevap_orneği": "Tüm sistemi (UI, API, DB) gerçek kullanıcı senaryosuyla test eder. Yavaş ve kırılgan olduğu için pahalıdır.",
    "anahtar_kelimeler": ["gerçek-senaryo", "ui", "kırılgan", "pahalı"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F004"
  },
  {
    "id": "Q140",
    "kategori": "teknik",
    "soru": "OOP'deki Soyutlama (Abstraction) prensibinin Clean Code üzerindeki etkisi nedir?",
    "difficulty_level": 2,
    "etiketler": ["nesne-tabanlı-programlama", "clean-code"],
    "prereq_tags": ["nesne-tabanlı-programlama"],
    "follow_up_to": null,
    "cevap_orneği": "Karmaşık detayları kullanıcıdan gizleyerek sadece gerekli fonksiyonelliği gösterir, bu da kodun okunabilirliğini artırır.",
    "anahtar_kelimeler": ["detay-gizleme", "okunabilirlik", "arayüz"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F001"
  },
  {
    "id": "Q141",
    "kategori": "teknik",
    "soru": "Veri Yapıları'nda Graf (Graph) modelini kullanmayı gerektiren bir problem örneği ver.",
    "difficulty_level": 2,
    "etiketler": ["veri-yapıları", "algoritma"],
    "prereq_tags": ["veri-yapıları"],
    "follow_up_to": null,
    "cevap_orneği": "Sosyal ağ bağlantıları, navigasyon (en kısa yol) veya ağ topolojisi gibi ilişkisel veri setleri.",
    "anahtar_kelimeler": ["sosyal-ağ", "navigasyon", "ilişki"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F005"
  },
  {
    "id": "Q142",
    "kategori": "teknik",
    "soru": "Paralel Programlama'da Paylaşılan Kaynak (Shared Resource) nedir ve erişiminde hangi problem ortaya çıkar?",
    "difficulty_level": 2,
    "etiketler": ["paralel-programlama", "işletim-sistemleri"],
    "prereq_tags": ["paralel-programlama"],
    "follow_up_to": null,
    "cevap_orneği": "Birden fazla Thread/Process'in aynı anda eriştiği veridir. Erişimi senkronize edilmezse Yarış Koşulları (Race Conditions) oluşur.",
    "anahtar_kelimeler": ["yarış-koşulu", "shared-memory", "senkronizasyon"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F010"
  },
  {
    "id": "Q143",
    "kategori": "teknik",
    "soru": "Clean Code prensiplerine göre, bir fonksiyonun tek bir iş yapması neden kritiktir?",
    "difficulty_level": 2,
    "etiketler": ["clean-code", "yazılım"],
    "prereq_tags": ["clean-code"],
    "follow_up_to": null,
    "cevap_orneği": "Kodun test edilebilirliğini artırır ve hataların izole edilmesini kolaylaştırır (SRP prensibi).",
    "anahtar_kelimeler": ["tek-sorumluluk", "test-edilebilirlik", "izolasyon"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F009"
  },
  {
    "id": "Q144",
    "kategori": "teknik",
    "soru": "Veri Analitiği'nde Korelasyon ile Nedensellik (Causation) arasındaki farkı açıkla.",
    "difficulty_level": 2,
    "etiketler": ["veri-analitiği", "iş-zekası"],
    "prereq_tags": ["veri-analitiği"],
    "follow_up_to": null,
    "cevap_orneği": "Korelasyon: İki şeyin birlikte hareket etmesidir. Nedensellik: Bir şeyin doğrudan diğerine neden olmasıdır (Korelasyon nedensellik değildir).",
    "anahtar_kelimeler": ["korelasyon", "nedensellik", "ilişki", "sebep-sonuç"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q145",
    "kategori": "teknik",
    "soru": "Agile/Scrum'da Sprint Retrospektif toplantısının temel amacı nedir?",
    "difficulty_level": 2,
    "etiketler": ["agile-scrum", "proje-yönetimi"],
    "prereq_tags": ["agile-scrum"],
    "follow_up_to": null,
    "cevap_orneği": "Geçen sprint'in süreç, araçlar ve takım ilişkileri açısından iyileştirilmesi gereken yönlerini belirlemektir.",
    "anahtar_kelimeler": ["iyileştirme", "süreç", "takım-ilişkisi", "öğrenme"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q146",
    "kategori": "teknik",
    "soru": "JavaScript'teki Async/Await yapısının, geleneksel Callback yapısına göre sağladığı temel okunabilirlik avantajı nedir?",
    "difficulty_level": 2,
    "etiketler": ["nodejs-python-java", "frontend"],
    "prereq_tags": ["nodejs-python-java"],
    "follow_up_to": null,
    "cevap_orneği": "Callback Hell (cehennemi) adı verilen iç içe geçmiş asenkron kod yapısını düzleştirerek kodu senkron gibi okunabilir hale getirir.",
    "anahtar_kelimeler": ["callback-hell", "okunabilirlik", "senkron-gibi", "promise"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q147",
    "kategori": "teknik",
    "soru": "DevOps'ta Rollback (Geri Alma) mekanizması neden kritik öneme sahiptir?",
    "difficulty_level": 2,
    "etiketler": ["devops", "ci-cd", "risk-yonetimi"],
    "prereq_tags": ["devops", "ci-cd"],
    "follow_up_to": null,
    "cevap_orneği": "Üretim ortamına çıkan hatalı bir sürümün etkisini hızla minimize etmek ve önceki stabil sürüme dönmek için kullanılır.",
    "anahtar_kelimeler": ["hatalı-sürüm", "stabil-sürüm", "hız", "risk-minimize"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F008"
  },
  {
    "id": "Q148",
    "kategori": "teknik",
    "soru": "Sistem Analizi sırasında bir sistemin Fonksiyonel ve Fonksiyonel Olmayan gereksinimleri arasındaki farkı anlat.",
    "difficulty_level": 2,
    "etiketler": ["sistem-analizi-ve-tasarımı", "iş-analizi"],
    "prereq_tags": ["sistem-analizi-ve-tasarımı"],
    "follow_up_to": null,
    "cevap_orneği": "Fonksiyonel: Sistemin *ne yapması* gerektiği (Örn: Giriş yapma). Fonksiyonel Olmayan: Sistemin *nasıl olması* gerektiği (Örn: Hız, güvenlik).",
    "anahtar_kelimeler": ["ne-yapmalı", "nasıl-olmalı", "performans", "güvenlik"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q149",
    "kategori": "teknik",
    "soru": "Bilgi Sistemi Stratejisinin, kısa vadeli BT projeleriyle uzun vadeli iş hedefleri arasında nasıl bir köprü kurduğunu açıkla.",
    "difficulty_level": 2,
    "etiketler": ["bilgi-sistemi-stratejisi", "teknoloji-yönetimi"],
    "prereq_tags": ["bilgi-sistemi-stratejisi"],
    "follow_up_to": null,
    "cevap_orneği": "Kısa vadeli yatırımların (projeler) şirketin gelecekteki rekabet avantajını ve vizyonunu destekleyecek şekilde hizalanmasını sağlar.",
    "anahtar_kelimeler": ["vizyon", "hizalanma", "rekabet-avantajı", "yatırım"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q150",
    "kategori": "teknik",
    "soru": "Gömülü Sistemler'de Watchdog Timer ne işe yarar?",
    "difficulty_level": 2,
    "etiketler": ["gömülü-sistemler", "donanım-yazılım-entegrasyonu"],
    "prereq_tags": ["gömülü-sistemler"],
    "follow_up_to": null,
    "cevap_orneği": "Sistem yazılımının (firmware) kritik bir görevde takılıp kalması durumunda sistemi otomatik olarak yeniden başlatarak kurtarmayı sağlar.",
    "anahtar_kelimeler": ["yeniden-başlatma", "kurtarma", "takılıp-kalma"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F002"
  },
  {
    "id": "Q151",
    "kategori": "teknik",
    "soru": "API Design'da Rate Limiting (Hız Sınırlama) neden kullanılır?",
    "difficulty_level": 2,
    "etiketler": ["api-design", "performans-optimizasyonu"],
    "prereq_tags": ["api-design"],
    "follow_up_to": null,
    "cevap_orneği": "Tek bir kullanıcının veya botun sunucuyu aşırı yüklemesini önler ve hizmetin tüm kullanıcılar için erişilebilir kalmasını sağlar.",
    "anahtar_kelimeler": ["aşırı-yükleme", "hizmet-kalitesi", "bot", "sınırlama"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F008"
  },
  {
    "id": "Q152",
    "kategori": "teknik",
    "soru": "YBS'de Karar Destek Sistemlerinin (DSS) 3 temel bileşeni nedir?",
    "difficulty_level": 2,
    "etiketler": ["karar-destek-sistemleri", "iş-zekası"],
    "prereq_tags": ["karar-destek-sistemleri"],
    "follow_up_to": null,
    "cevap_orneği": "Veritabanı (Database), Model Tabanı (Model Base) ve Kullanıcı Arayüzü (User Interface/Dialogue).",
    "anahtar_kelimeler": ["veritabanı", "model-tabanı", "arayüz"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q153",
    "kategori": "teknik",
    "soru": "Tasarım Kalıplarında Observer kalıbı ne zaman kullanılır?",
    "difficulty_level": 2,
    "etiketler": ["tasarım-kalıpları", "yazılım-mimarisi"],
    "prereq_tags": ["tasarım-kalıpları"],
    "follow_up_to": null,
    "cevap_orneği": "Bir nesnedeki durum değişikliği olduğunda, bu nesneye bağımlı olan diğer nesnelerin otomatik olarak güncellenmesi gerektiğinde kullanılır.",
    "anahtar_kelimeler": ["durum-değişikliği", "otomatik-güncelleme", "bağımlılık"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F009"
  },
  {
    "id": "Q154",
    "kategori": "teknik",
    "soru": "Sistem Programlama bağlamında Buffer Overflow (Tampon Taşması) nedir?",
    "difficulty_level": 2,
    "etiketler": ["sistem-programlama", "kriptografi"],
    "prereq_tags": ["sistem-programlama"],
    "follow_up_to": null,
    "cevap_orneği": "Bir programın, bellekte ayrılan tamponun (buffer) sınırlarından daha fazla veri yazmaya çalışmasıdır; sıklıkla güvenlik açığı yaratır.",
    "anahtar_kelimeler": ["tampon", "bellek-sınırı", "veri-yazma", "güvenlik-açığı"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F015"
  },
  {
    "id": "Q155",
    "kategori": "teknik",
    "soru": "Veri İletimi'nde QoS (Quality of Service) kavramının temel amacı nedir?",
    "difficulty_level": 2,
    "etiketler": ["ağ", "veri-iletimi"],
    "prereq_tags": ["ağ"],
    "follow_up_to": null,
    "cevap_orneği": "Ağdaki kritik trafiğe (örneğin VoIP) diğer trafiğe göre öncelik vererek garanti edilmiş bir performans seviyesi sağlamaktır.",
    "anahtar_kelimeler": ["öncelik", "garanti-seviye", "kritik-trafik"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F003"
  },
  {
    "id": "Q156",
    "kategori": "teknik",
    "soru": "İşletim Sistemlerinde Threshing (Sistem Kilitlenmesi) nedir? Sanal Bellek (Virtual Memory) ile nasıl ilişkilidir?",
    "difficulty_level": 3,
    "etiketler": ["işletim-sistemleri", "performans-optimizasyonu"],
    "prereq_tags": ["işletim-sistemleri"],
    "follow_up_to": null,
    "cevap_orneği": "Threshing, CPU'nun zamanının çoğunu sayfa takası (paging/swapping) yaparak geçirmesi ve faydalı iş yapamamasıdır. Yetersiz bellek tahsisiyle ilişkilidir.",
    "anahtar_kelimeler": ["sayfa-takası", "paging", "cpu-kullanımı", "sanal-bellek"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F010"
  },
  {
    "id": "Q157",
    "kategori": "teknik",
    "soru": "Paralel Programlama'da Amdahl Yasası neyi ifade eder? Paralel kaynak eklemenin getirdiği verimlilik artışının sınırlarını nasıl belirler?",
    "difficulty_level": 3,
    "etiketler": ["paralel-programlama", "hesaplama-teorisi"],
    "prereq_tags": ["hesaplama-teorisi", "paralel-programlama"],
    "follow_up_to": null,
    "cevap_orneği": "Bir sistemin hızlanma potansiyelinin, programın seri (paralel yapılamayan) kısmıyla sınırlı olduğunu belirtir.",
    "anahtar_kelimeler": ["seri-kısım", "sınır", "hızlanma-potansiyeli"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F013"
  },
  {
    "id": "Q158",
    "kategori": "teknik",
    "soru": "Yazılım Mimarisinde Event Sourcing (Olay Kaynaklama) deseni ne zaman ve neden geleneksel CRUD modeline tercih edilir?",
    "difficulty_level": 3,
    "etiketler": ["yazılım-mimarisi", "microservices", "veritabani"],
    "prereq_tags": ["yazılım-mimarisi", "veritabani"],
    "follow_up_to": null,
    "cevap_orneği": "Geçmişteki tüm durum değişikliklerini olay zinciri olarak saklar. Denetlenebilirlik (auditing) ve veri bütünlüğü kritik olduğunda kullanılır.",
    "anahtar_kelimeler": ["olay-zinciri", "crud", "denetlenebilirlik", "veri-bütünlüğü"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F014"
  },
  {
    "id": "Q159",
    "kategori": "teknik",
    "soru": "IT Yönetişimi çerçevesinde COBIT ve ITIL arasındaki farkı ve rollerini açıkla.",
    "difficulty_level": 3,
    "etiketler": ["it-yönetişimi", "bilgi-sistemi-stratejisi"],
    "prereq_tags": ["it-yönetişimi"],
    "follow_up_to": null,
    "cevap_orneği": "COBIT: İş hedefleriyle BT'yi hizalayan bir *Kontrol Çerçevesi*dir. ITIL: BT hizmetlerini yönetmeye odaklanan bir *Süreç Çerçevesi*dir.",
    "anahtar_kelimeler": ["cobit", "itil", "kontrol-çerçevesi", "süreç-çerçevesi"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F026"
  },
  {
    "id": "Q160",
    "kategori": "teknik",
    "soru": "C/C++ gibi Sistem Programlama dillerinde Stack ve Heap bellek bölgeleri arasındaki temel fark nedir?",
    "difficulty_level": 3,
    "etiketler": ["sistem-programlama", "performans-optimizasyonu"],
    "prereq_tags": ["sistem-programlama"],
    "follow_up_to": null,
    "cevap_orneği": "Stack: Otomatik yönetilir, hızlıdır, yerel değişkenler içindir (LIFO). Heap: Manuel yönetilir, yavaştır, dinamik bellek ayırma içindir.",
    "anahtar_kelimeler": ["stack", "heap", "otomatik-yönetim", "manuel-yönetim"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F019"
  },
  {
    "id": "Q161",
    "kategori": "teknik",
    "soru": "Gömülü Sistemler'de Hata Toleransı (Fault Tolerance) nasıl sağlanır?",
    "difficulty_level": 3,
    "etiketler": ["gömülü-sistemler", "donanım-yazılım-entegrasyonu"],
    "prereq_tags": ["gömülü-sistemler"],
    "follow_up_to": null,
    "cevap_orneği": "Redundancy (yedeklilik), Watchdog Timer'lar ve hata algılama/düzeltme kodlarıyla (ECC memory) sağlanır.",
    "anahtar_kelimeler": ["redundancy", "hata-toleransı", "watchdog-timer"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F027"
  },
  {
    "id": "Q162",
    "kategori": "teknik",
    "soru": "CI/CD'de Canary Deployment ve Blue/Green Deployment stratejileri arasındaki farkı anlat.",
    "difficulty_level": 3,
    "etiketler": ["ci-cd", "devops", "risk-yonetimi"],
    "prereq_tags": ["ci-cd", "devops"],
    "follow_up_to": null,
    "cevap_orneği": "Blue/Green: Eski ve yeni versiyonun tamamen ayrılması. Canary: Trafiğin küçük bir yüzdesini yeni versiyona yönlendirerek riskin test edilmesi.",
    "anahtar_kelimeler": ["canary", "blue-green", "risk-azaltma", "trafik-yönlendirme"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F008"
  },
  {
    "id": "Q163",
    "kategori": "teknik",
    "soru": "JavaScript'te Event Loop (Olay Döngüsü) ne demektir ve neden non-blocking I/O için kritiktir?",
    "difficulty_level": 3,
    "etiketler": ["nodejs-python-java", "işletim-sistemleri"],
    "prereq_tags": ["nodejs-python-java"],
    "follow_up_to": null,
    "cevap_orneği": "Tek iş parçacıklı (single-threaded) yapının, uzun süren işlemleri asenkron olarak yönetmesini sağlayan mekanizmadır.",
    "anahtar_kelimeler": ["single-thread", "asenkron", "non-blocking", "kuyruk"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F010"
  },
  {
    "id": "Q164",
    "kategori": "teknik",
    "soru": "Design Thinking ile Agile/Scrum arasındaki ilişkiyi ve birinin diğerini nasıl beslediğini açıkla.",
    "difficulty_level": 3,
    "etiketler": ["design-thinking", "agile-scrum", "proje-yönetimi"],
    "prereq_tags": ["design-thinking", "agile-scrum"],
    "follow_up_to": null,
    "cevap_orneği": "Design Thinking 'doğru şeyi yapmak' (ürün tanımı) için kullanılır; Agile ise 'şeyi doğru yapmak' (teslimat) için kullanılır.",
    "anahtar_kelimeler": ["doğru-şey", "doğru-yapmak", "tanım", "teslimat"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F021"
  },
  {
    "id": "Q165",
    "kategori": "teknik",
    "soru": "Hesaplama Teorisi'nde 'Durma Problemi' (Halting Problem) ne anlama gelir?",
    "difficulty_level": 3,
    "etiketler": ["hesaplama-teorisi", "algoritma"],
    "prereq_tags": ["hesaplama-teorisi"],
    "follow_up_to": null,
    "cevap_orneği": "Verilen bir programın sonsuza dek döngüye girip girmeyeceğini belirleyecek genel bir algoritmanın mümkün olmadığını gösterir.",
    "anahtar_kelimeler": ["halting-problem", "sonsuz-döngü", "çözülemez"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F030"
  },
  {
    "id": "Q166",
    "kategori": "teknik",
    "soru": "Siber Risk ve Kriptografi bağlamında Man-in-the-Middle (MITM) saldırısı nasıl gerçekleşir ve TLS ile nasıl önlenir?",
    "difficulty_level": 3,
    "etiketler": ["siber-risk-ve-uyumluluk", "kriptografi", "ağ"],
    "prereq_tags": ["siber-risk-ve-uyumluluk", "kriptografi"],
    "follow_up_to": null,
    "cevap_orneği": "İki iletişim noktası arasına girerek veriyi dinleme/değiştirme. TLS, kimlik doğrulaması ve şifreleme ile saldırıyı tespit eder/önler.",
    "anahtar_kelimeler": ["mitm", "tls-şifreleme", "dinleme", "kimlik-doğrulama"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F015"
  },
  {
    "id": "Q167",
    "kategori": "teknik",
    "soru": "Veri Analitiği'nde A/B Testi'nin istatistiksel gücü ve iş kararlarına etkisi nasıl ölçülür?",
    "difficulty_level": 3,
    "etiketler": ["veri-analitiği", "iş-zekası", "test"],
    "prereq_tags": ["veri-analitiği", "test"],
    "follow_up_to": null,
    "cevap_orneği": "İstatistiksel anlamlılık (p-value) ve dönüşüm oranındaki (conversion rate) güven aralıkları ile ölçülür.",
    "anahtar_kelimeler": ["a-b-testi", "istatistiksel-anlamlılık", "dönüşüm-oranı"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F025"
  },
  {
    "id": "Q168",
    "kategori": "teknik",
    "soru": "Agile/Scrum'da Refactoring için nasıl zaman ayırırsın? Bu zamanı Product Owner'a nasıl savunursun?",
    "difficulty_level": 3,
    "etiketler": ["agile-scrum", "clean-code", "proje-yönetimi"],
    "prereq_tags": ["agile-scrum", "proje-yönetimi"],
    "follow_up_to": null,
    "cevap_orneği": "Her sprint'te küçük bir yüzdesini (örn: %10) ayırırım. Savunma: Teknik Borcun uzun vadeli iş maliyetini ve hız düşüşünü göstererek yaparım.",
    "anahtar_kelimeler": ["refactoring", "sprint-yüzdesi", "teknik-borç-maliyeti"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F021"
  },
  {
    "id": "Q169",
    "kategori": "teknik",
    "soru": "UI/UX'te Erişilebilirlik (Accessibility) standartlarına (WCAG) uymak neden bir iş gereksinimi olmalıdır?",
    "difficulty_level": 3,
    "etiketler": ["ui-ux", "siber-risk-ve-uyumluluk", "design-thinking"],
    "prereq_tags": ["ui-ux", "siber-risk-ve-uyumluluk"],
    "follow_up_to": null,
    "cevap_orneği": "Yasal uyumluluk (compliance) zorunluluğu ve pazar potansiyelini (engelli kullanıcılar dahil) artırmak için bir etik gerekliliktir.",
    "anahtar_kelimeler": ["wcag", "yasal-uyum", "etik-gereklilik", "pazar-potansiyeli"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F012"
  },
  {
    "id": "Q170",
    "kategori": "teknik",
    "soru": "NoSQL veritabanlarının Yatay Ölçeklenmeye (Horizontal Scaling) neden daha uygun olduğunu açıklayın.",
    "difficulty_level": 3,
    "etiketler": ["veritabani", "yazılım-mimarisi", "microservices"],
    "prereq_tags": ["veritabani", "yazılım-mimarisi"],
    "follow_up_to": null,
    "cevap_orneği": "İlişkisel şema zorunluluğu yoktur; veriler farklı sunuculara kolayca bölünebilir (sharding/partitioning).",
    "anahtar_kelimeler": ["yatay-ölçekleme", "sharding", "partitioning", "şemasız"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F014"
  },
  {
    "id": "Q171",
    "kategori": "teknik",
    "soru": "Sistem Analizi'nde Use Case Diagram (Kullanım Durumu Diyagramı) neyi gösterir?",
    "difficulty_level": 2,
    "etiketler": ["sistem-analizi-ve-tasarımı", "iş-analizi"],
    "prereq_tags": ["sistem-analizi-ve-tasarımı"],
    "follow_up_to": null,
    "cevap_orneği": "Sistemin kullanıcılar (aktörler) ile olan etkileşimini ve temel fonksiyonel gereksinimleri gösterir.",
    "anahtar_kelimeler": ["aktör", "etkileşim", "fonksiyonel-gereksinim"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": null
  },
  {
    "id": "Q172",
    "kategori": "teknik",
    "soru": "DevOps'ta Configuration Management (Yapılandırma Yönetimi) araçları (Puppet, Ansible) ne işe yarar?",
    "difficulty_level": 2,
    "etiketler": ["devops", "ci-cd"],
    "prereq_tags": ["devops"],
    "follow_up_to": null,
    "cevap_orneği": "Sunucu ve sistem yapılandırmalarının kod olarak (IaC) otomatik ve tutarlı bir şekilde yönetilmesini sağlar.",
    "anahtar_kelimeler": ["ia-c", "otomasyon", "sunucu-yapılandırma"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F008"
  },
  {
    "id": "Q173",
    "kategori": "teknik",
    "soru": "API Design'da, URI'larda fiil (action) kullanmaktan neden kaçınılır?",
    "difficulty_level": 2,
    "etiketler": ["api-design", "restful"],
    "prereq_tags": ["api-design"],
    "follow_up_to": null,
    "cevap_orneği": "RESTful mimarisi, kaynaklara (isimler) odaklanır; fiiller HTTP metotları (GET, POST) tarafından sağlanır.",
    "anahtar_kelimeler": ["kaynak-odaklı", "http-metotları", "fiil-kullanmama"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F016"
  },
  {
    "id": "Q174",
    "kategori": "teknik",
    "soru": "Gömülü Sistemler'de Interrupt (Kesme) kullanmak neden Polling (Sürekli Kontrol) yapmaktan daha verimlidir?",
    "difficulty_level": 2,
    "etiketler": ["gömülü-sistemler", "performans-optimizasyonu"],
    "prereq_tags": ["gömülü-sistemler"],
    "follow_up_to": null,
    "cevap_orneği": "Kesme, CPU'yu gereksiz yere meşgul etmez; sadece bir olay (veri gelmesi) olduğunda CPU'ya haber verir.",
    "anahtar_kelimeler": ["cpu-meşguliyet", "polling", "olay-güdümlü"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F010"
  },
  {
    "id": "Q175",
    "kategori": "teknik",
    "soru": "Java ve Python gibi dillerde Çöp Toplama (Garbage Collection) mekanizması nasıl çalışır?",
    "difficulty_level": 2,
    "etiketler": ["nodejs-python-java", "sistem-programlama"],
    "prereq_tags": ["nodejs-python-java"],
    "follow_up_to": null,
    "cevap_orneği": "Artık referansı kalmayan (ulaşılamayan) nesneleri otomatik olarak bellekten temizler.",
    "anahtar_kelimeler": ["referans-sayımı", "bellek-temizleme", "nesne-izleme"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F019"
  },
  {
    "id": "Q176",
    "kategori": "teknik",
    "soru": "Tasarım Kalıplarında Adapter kalıbı ne zaman kullanılır?",
    "difficulty_level": 2,
    "etiketler": ["tasarım-kalıpları", "yazılım-mimarisi"],
    "prereq_tags": ["tasarım-kalıpları"],
    "follow_up_to": null,
    "cevap_orneği": "Uyumsuz arayüzlere sahip sınıfların birlikte çalışmasını sağlamak için bir köprü görevi gördüğünde kullanılır.",
    "anahtar_kelimeler": ["uyumsuz-arayüz", "köprü", "birlikte-çalışma"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F022"
  },
  {
    "id": "Q177",
    "kategori": "teknik",
    "soru": "Bilgi Sistemi Stratejisinin temel amacı nedir?",
    "difficulty_level": 2,
    "etiketler": ["bilgi-sistemi-stratejisi", "it-yönetişimi"],
    "prereq_tags": ["bilgi-sistemi-stratejisi"],
    "follow_up_to": null,
    "cevap_orneği": "Şirketin genel iş stratejisini desteklemek ve BT'nin iş hedeflerine değer katmasını sağlamaktır.",
    "anahtar_kelimeler": ["iş-stratejisi", "değer-katma", "hizalama"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F026"
  },
  {
    "id": "Q178",
    "kategori": "teknik",
    "soru": "Yapay Zeka Temellerinde Özellik Mühendisliği (Feature Engineering)'nin önemi nedir?",
    "difficulty_level": 2,
    "etiketler": ["yapay-zeka-temelleri", "veri-analitiği"],
    "prereq_tags": ["yapay-zeka-temelleri"],
    "follow_up_to": null,
    "cevap_orneği": "Ham veriden, modelin daha iyi öğrenmesini sağlayacak yeni ve anlamlı özellikler yaratmaktır.",
    "anahtar_kelimeler": ["ham-veri", "anlamlı-özellik", "model-performansı"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F025"
  },
  {
    "id": "Q179",
    "kategori": "teknik",
    "soru": "IT Yönetişiminde risk yönetimi süreci nasıl işler?",
    "difficulty_level": 2,
    "etiketler": ["it-yönetişimi", "siber-risk-ve-uyumluluk"],
    "prereq_tags": ["it-yönetişimi"],
    "follow_up_to": null,
    "cevap_orneği": "Riskleri belirleme, analiz etme, değerlendirme ve uygun müdahale yöntemlerini (önleme, transfer) uygulama süreçlerini içerir.",
    "anahtar_kelimeler": ["risk-belirleme", "analiz", "müdahale", "transfer"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F026"
  },
  {
    "id": "Q180",
    "kategori": "teknik",
    "soru": "Proje Planlama yaparken Gereksinim İzlenebilirliği (Requirements Traceability) ne demektir?",
    "difficulty_level": 2,
    "etiketler": ["proje-planlama", "sistem-analizi-ve-tasarımı"],
    "prereq_tags": ["proje-planlama"],
    "follow_up_to": null,
    "cevap_orneği": "Her gereksinimin test senaryolarına, tasarıma ve koda kadar takip edilebilir olmasıdır.",
    "anahtar_kelimeler": ["izlenebilirlik", "gereksinim", "test-senaryosu", "takip"],
    "puanlama_kriteri": "anahtar-kelimeler",
    "fallback_id": "F080"
  }

]